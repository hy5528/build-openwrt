name: build onecloud-25.02

on:
  repository_dispatch:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

      
    steps:
      - name: 释放磁盘空间
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
          
    
      - name: Checkout armbian
        run: |
           git clone --depth=1 --branch=main https://github.com/soulteary/armbian-build-s805.git build 

      - name: "Checkout current repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: false
          path: current
          
      - name: "Copy userpatches to build folder"
        shell: bash
        run: |
          sudo rm -r build/lib    
          rsync -av current/patch/. build/
          sudo chmod 777 build/compile.sh
          
      - name: Build
        run: |
          cd build
          # Don't update remote cache
          sudo ./compile.sh BOARD=onecloud BRANCH=current RELEASE=bookworm BUILD_MINIMAL=yes BUILD_DESKTOP=no KERNEL_ONLY=no KERNEL_CONFIGURE=no COMPRESS_OUTPUTIMAGE=sha,gpg,img DOWNLOAD_MIRROR=china MAINLINE_MIRROR=tuna EXTRAWIFI=no
          sudo chown $(id -u):$(id -g) -R output/

      - name: Install Dependents
        run: |
          sudo apt install img2simg
          ver="v0.3.1"
          chmod +x ./AmlImg
      - name: Download and unpack the latest u-boot
        run: |
          ./AmlImg unpack ./uboot.img burn/
      - name: Extract boot and rootfs partitions
        run: |
          diskimg=$(ls build/output/images/*.img)
          loop=$(sudo losetup --find --show --partscan $diskimg)
          sudo img2simg ${loop}p1 burn/boot.simg
          sudo img2simg ${loop}p2 burn/rootfs.simg
          sudo losetup -d $loop
          sudo chown $(id -u):$(id -g) -R burn/
      - name: Generate burn image
        run: |
          echo -n "sha1sum $(sha1sum burn/boot.simg | awk '{print $1}')" >burn/boot.VERIFY
          echo -n "sha1sum $(sha1sum burn/rootfs.simg | awk '{print $1}')" >burn/rootfs.VERIFY
          cat <<EOF >>burn/commands.txt
          PARTITION:boot:sparse:boot.simg
          VERIFY:boot:normal:boot.VERIFY
          PARTITION:rootfs:sparse:rootfs.simg
          VERIFY:rootfs:normal:rootfs.VERIFY
          EOF
          prefix=$(ls ./build/output/images/*.img | sed 's/\.img$//')
          burnimg=${prefix}.burn.img
          ./AmlImg pack $burnimg burn/
      - name: Hash and compress images
        run: |
          for f in ./build/output/images/*.img; do
            sha256sum "$f" | tee -a sha256sum
            xz --threads=0 --compress "$f"
          done
      - name: Create Release Tag
        if: env.UPLOAD_RELEASE == 'true'
        run: |
          echo "release_tag=$(date +%Y%m%d)" >> $GITHUB_ENV
      - name: Upload artifacts
        if: env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@main
        with:
          name: armbian-image
          path: ./build/output/images/*.xz

      - name: Upload to release
        if: env.UPLOAD_RELEASE == 'true'
        uses: softprops/action-gh-release@v2.1.0
        with:
          tag_name: ${{ env.release_tag }}
          name: Armbian ${{ env.release_tag }}
          files: ./build/output/images/*.xz
