#
# Copyright (c) 2019-2025 OPPEN321
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/zhiern/ZeroWrt
# Description: Build OpenWrt using GitHub Actions

name: üíª Âõ∫‰ª∂ÁºñËØë

on:
  workflow_dispatch:
    inputs:
      gcc_version:
        description: 'ÈÄâÊã© GCC ÊûÑÂª∫ÁâàÊú¨'
        required: true
        default: 'GCC15'
        type: choice
        options:
          - 'GCC13'
          - 'GCC14'
          - 'GCC15'
      web_server:
        description: 'ÈÄâÊã© Web ÊúçÂä°Âô®'
        required: true
        default: 'nginx'
        type: choice
        options:
          - 'nginx'
          - 'uhttpd'
      docker:
        description: 'ÂêØÁî® Docker ÊîØÊåÅ'
        type: boolean
        default: true
      lan_addr:
        description: 'ËÆæÁΩÆÈªòËÆ§ LAN Âú∞ÂùÄ'
        required: true
        default: '192.168.2.158'
        type: string
      root_password:
        description: 'ËÆæÁΩÆÈªòËÆ§ root ÂØÜÁ†ÅÔºàÂèØÈÄâÔºåÈªòËÆ§passwordÔºâ'
        required: false
        default: 'password'
        type: string
      build_options:
        description: 'ÊûÑÂª∫ÈÄâÈ°πÔºàÂ§ö‰∏™ÈÄâÈ°πÁî®Á©∫Ê†ºÂàÜÈöîÔºâ'
        required: false
        default: 'BUILD_FAST=y ENABLE_BPF=y ENABLE_LTO=y ENABLE_OTA=y'
        type: string
          
jobs:
  build:
    name: Build ${{ matrix.model }}
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        model:
          - onecloud

    steps:
    - name: Checkout
      continue-on-error: true
      uses: actions/checkout@main
      with:
        path: ZeroWrt
       
    - name: Setup variables
      run: |
        sudo timedatectl set-timezone 'Asia/Shanghai'
        git config --global user.name 'actions'
        git config --global user.email 'action@github.com'
        echo build_dir="/builder" >> "$GITHUB_ENV"
        echo build_version="v24" >> "$GITHUB_ENV"
        
    - name: Show system
      run: |
        echo -e "\n\e[1;32mCPU:\e[0m"
        echo "$(grep 'model name' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}') ($(grep 'cpu MHz' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}')MHz) x $(grep processor /proc/cpuinfo  | wc -l)"
        echo -e "\n\e[1;32mMemory:\e[0m"
        free -h
        echo -e "\n\e[1;32mStorage:\e[0m"
        df -Th / /mnt
        echo -e "\n\e[1;32mSystem:\e[0m"
        lsb_release -a
        echo -e "\n\e[1;32mKernel:\e[0m"
        uname -a
        echo

    - name: Install Caddy Server
      run: |
        sudo curl -sL -o /usr/bin/caddy https://github.com/zhiern/ZeroWrt/releases/download/Caddy/caddy
        sudo chmod 755 /usr/bin/caddy
        echo ":8080 {" > caddyfile
        echo "    root * $(pwd)/ZeroWrt" >> caddyfile
        echo "    file_server browse" >> caddyfile
        echo "}" >> caddyfile
        sudo /usr/bin/caddy start --config caddyfile --adapter caddyfile

    - name: Start notification
      run: |
        bash <(curl -sS http://127.0.0.1:8080/openwrt/scripts/10-BuildBeacon-start.sh)
      env:
        RELEASE_TAG: ${{ env.build_version }}
        COMPILE_TYPE: ${{ matrix.model }}
        GCC_VERSION: ${{ github.event.inputs.gcc_version }}
        WEB_SERVER: ${{ github.event.inputs.web_server }}
        DOCKER: ${{ github.event.inputs.docker }}
        LAN_ADDR: ${{ github.event.inputs.lan_addr }}
        ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
        BUILD_OPTIONS: ${{ github.event.inputs.build_options }}
        TGID: ${{ secrets.TGID }}
        TG_TOKEN: ${{ secrets.TG_TOKEN }}
        
    - name: Free disk space
      uses: sbwml/actions@free-disk
      with:
        build-mount-path: /builder
    - name: Load onecloud
      run: |
        mv target/linux/amlogic openwrt/target/linux
        chmod -Rf 755 openwrt/target/linux/amlogic
        
    - name: Build System Setup
      uses: sbwml/actions@openwrt-build-setup

    - name: Install LLVM
      uses: sbwml/actions@install-llvm

    - name: Compile OpenWrt
      working-directory: /builder
      id: compile
      continue-on-error: true
      run: |
        export ${{ github.event.inputs.build_options }} LAN=${{ github.event.inputs.lan_addr }} GCC_VERSION=${{ github.event.inputs.gcc_version }} web_server=${{ github.event.inputs.web_server }}
        [ ${{ github.event.inputs.docker }} = 'true' ] && export ENABLE_DOCKER=y
        [ -n ${{ github.event.inputs.root_password }} ] && export ROOT_PASSWORD="${{ github.event.inputs.root_password }}"
        bash <(curl -sS http://127.0.0.1:8080/build.sh) ${{ env.build_version }} ${{ matrix.model }}
        cd openwrt
        tags=OpenWrt-$(git describe --abbrev=0 --tags)
        echo "latest_release=$tags" >>$GITHUB_ENV

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: ÁîüÊàêÁõ¥Âà∑ÂåÖ
      if: steps.compile.outputs.status == 'success'
      run: |
        chmod +x $GEN_BURN_IMG_SH
        chmod +x AmlImg
        $GITHUB_WORKSPACE/$GEN_BURN_IMG_SH

    - name: Check space usage
      if: (!cancelled())
      run: df -hT
  
    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages feeds.buildinfo version.buildinfo sha256sums profiles.json *.sha *.manifest
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "üîó [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2.1.0
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Send msg to Wechat
      env:
        SENDKEY: ${{ secrets.SENDKEY }}
        TAG: ${{ steps.tag.outputs.release_tag }}
      run: curl -d "text=OpenWrtÁºñËØëÁªìÊùü&desp=https://github.com/${GITHUB_REPOSITORY}/releases/${TAG}" https://sctapi.ftqq.com/${SENDKEY}.send
